import { GoogleGenAI, Modality } from "@google/genai";
import { AspectRatio } from "../types";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export async function generateThumbnail(prompt: string, aspectRatio: AspectRatio): Promise<string> {
  const response = await ai.models.generateImages({
    model: 'imagen-4.0-generate-001',
    prompt: `A vibrant, eye-catching YouTube thumbnail about "${prompt}". High resolution, cinematic lighting, engaging composition.`,
    config: {
      numberOfImages: 1,
      outputMimeType: 'image/jpeg',
      aspectRatio: aspectRatio,
    },
  });

  if (!response.generatedImages || response.generatedImages.length === 0) {
    throw new Error("No images were generated by the API.");
  }

  const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
  return base64ImageBytes;
}


export async function replicateThumbnail(prompt: string, imageBase64: string, mimeType: string): Promise<string> {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
          parts: [
            {
              inlineData: {
                data: imageBase64,
                mimeType: mimeType,
              },
            },
            {
              text: prompt,
            },
          ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }

    throw new Error("The model did not return an image. It may have returned text instead: " + response.text);
}
